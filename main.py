import os
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

import asyncio
import json
import os
from pathlib import Path
from typing import Dict, Any, Optional

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, LabeledPrice
)
from dotenv import load_dotenv

# =========================
# –ö–æ–Ω—Ñ–∏–≥ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
# =========================
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL = os.getenv("CHANNEL", "@cherepkova_event")
BOT_USERNAME = (os.getenv("BOT_USERNAME") or "").lstrip("@")
PAYMENT_TOKEN = os.getenv("PAYMENT_TOKEN")  # provider token –æ—Ç @BotFather (/setpayment)
PRICE_RUB = int(os.getenv("PRICE_RUB", "990"))

if not BOT_TOKEN:
    raise SystemExit("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN")

ASSETS_FILE = Path("assets.json")     # —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
UNLOCKED_FILE = Path("unlocked.json") # –∫—Ç–æ –æ–ø–ª–∞—Ç–∏–ª

ASSETS: Dict[str, Any] = {}
UNLOCKED_CHATS: set[int] = set()      # –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —á–∞—Ç—ã
ONLY_MODE_CHATS: set[int] = set()     # —á–∞—Ç—ã, –ø—Ä–∏—à–µ–¥—à–∏–µ –ø–æ only:<key>

def load_assets():
    global ASSETS
    if ASSETS_FILE.exists():
        try:
            ASSETS = json.loads(ASSETS_FILE.read_text(encoding="utf-8"))
        except Exception:
            ASSETS = {}
    else:
        ASSETS = {}

def save_assets():
    ASSETS_FILE.write_text(json.dumps(ASSETS, ensure_ascii=False, indent=2), encoding="utf-8")

def load_unlocked():
    global UNLOCKED_CHATS
    if UNLOCKED_FILE.exists():
        try:
            UNLOCKED_CHATS = set(json.loads(UNLOCKED_FILE.read_text(encoding="utf-8")))
        except Exception:
            UNLOCKED_CHATS = set()
    else:
        UNLOCKED_CHATS = set()

def save_unlocked():
    UNLOCKED_FILE.write_text(json.dumps(list(UNLOCKED_CHATS)), encoding="utf-8")

# =========================
# –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# =========================
TITLES = {
    "venues":           "–ó–∞–≥–æ—Ä–æ–¥–Ω—ã–µ –ø–ª–æ—â–∞–¥–∫–∏ –±–µ–∑ –∞—Ä–µ–Ω–¥—ã (–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥)",
    "hidden_costs":     "–°–∫—Ä—ã—Ç—ã–µ —Ä–∞—Å—Ö–æ–¥—ã —Å–≤–∞–¥—å–±—ã",
    "vs_diy":           "–°–≤–∞–¥—å–±–∞ ¬´–ø–æ–¥ –∫–ª—é—á¬ª vs —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞",
    "checklist":        "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç: ¬´–ö–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–≤–∞–¥—å–±—É –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–±—ã—Ç—å¬ª",
    "budget_calc":      "–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–≤–∞–¥–µ–±–Ω—ã–π –±—é–¥–∂–µ—Ç",
    "venue_questions":  "–ö–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞—Ç—å –ø–ª–æ—â–∞–¥–∫–µ –ø–µ—Ä–µ–¥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º?"
}

def get_url(key: str) -> Optional[str]:
    data = ASSETS.get(key)
    if isinstance(data, dict):
        return data.get("url")
    if isinstance(data, str):
        return data
    return None

def link_kb_single(key: str) -> InlineKeyboardMarkup:
    url = get_url(key)
    if url:
        btn = InlineKeyboardButton(text=f"–û—Ç–∫—Ä—ã—Ç—å: {TITLES.get(key, key)}", url=url)
    else:
        fallback = f"https://t.me/{BOT_USERNAME}" if BOT_USERNAME else "https://t.me"
        btn = InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞", url=fallback)
    return InlineKeyboardMarkup(inline_keyboard=[[btn]])

def link_kb_all() -> InlineKeyboardMarkup:
    rows = []
    def row(k, label):
        u = get_url(k)
        if u:
            rows.append([InlineKeyboardButton(text=label, url=u)])

    row("venues",          "üè° –ü–ª–æ—â–∞–¥–∫–∏ –±–µ–∑ –∞—Ä–µ–Ω–¥—ã")
    row("hidden_costs",    "üí∏ –°–∫—Ä—ã—Ç—ã–µ —Ä–∞—Å—Ö–æ–¥—ã")
    row("vs_diy",          "‚öñÔ∏è –ü–æ–¥ –∫–ª—é—á vs DIY")
    row("checklist",       "üßæ –ß–µ–∫-–ª–∏—Å—Ç")
    row("budget_calc",     "üßÆ –ë—é–¥–∂–µ—Ç —Å–≤–∞–¥—å–±—ã")
    row("venue_questions", "‚ùì –í–æ–ø—Ä–æ—Å—ã –ø–ª–æ—â–∞–¥–∫–µ")

    if not rows:
        fallback = f"https://t.me/{BOT_USERNAME}" if BOT_USERNAME else "https://t.me"
        rows = [[InlineKeyboardButton(text="–°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã", url=fallback)]]
    return InlineKeyboardMarkup(inline_keyboard=rows)

def paywall_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"üîì –û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º ‚Äî {PRICE_RUB} ‚ÇΩ",
            callback_data="buy_all"
        )]
    ])

MAIN_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üè° –ü–ª–æ—â–∞–¥–∫–∏ –±–µ–∑ –∞—Ä–µ–Ω–¥—ã"), KeyboardButton(text="üí∏ –°–∫—Ä—ã—Ç—ã–µ —Ä–∞—Å—Ö–æ–¥—ã")],
        [KeyboardButton(text="‚öñÔ∏è –ü–æ–¥ –∫–ª—é—á vs DIY"),    KeyboardButton(text="üßÆ –ë—é–¥–∂–µ—Ç —Å–≤–∞–¥—å–±—ã")],
        [KeyboardButton(text="üßæ –ß–µ–∫-–ª–∏—Å—Ç"),           KeyboardButton(text="‚ùì –í–æ–ø—Ä–æ—Å—ã –ø–ª–æ—â–∞–¥–∫–µ")],
        [KeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å")]
    ],
    resize_keyboard=True
)

# =========================
# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
# =========================
bot = Bot(BOT_TOKEN)
dp = Dispatcher()

# =========================
# –°—Ç–∞—Ä—Ç + deeplink –ª–æ–≥–∏–∫–∞
# =========================
@dp.message(CommandStart())
async def start(message: types.Message):
    parts = (message.text or "").split(maxsplit=1)
    payload = parts[1].strip() if len(parts) == 2 else None

    # –ñ—ë—Å—Ç–∫–∏–π —Ä–µ–∂–∏–º: ?start=only:<key> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –º–∞—Ç–µ—Ä–∏–∞–ª + paywall
    if payload and payload.startswith("only:"):
        key = payload.split(":", 1)[1]
        if key in TITLES and get_url(key):
            ONLY_MODE_CHATS.add(message.chat.id)
            await message.answer(TITLES[key], reply_markup=link_kb_single(key))
            await message.answer("–•–æ—á–µ—à—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º?", reply_markup=paywall_kb())
            return
        else:
            await message.answer("–°—Å—ã–ª–∫–∞ –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

    # –ï—Å–ª–∏ —á–∞—Ç —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚Äî –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é
    if message.chat.id in UNLOCKED_CHATS:
        await message.answer("–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=MAIN_KB)
        await message.answer("–ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏:", reply_markup=link_kb_all())
        return

    # –û–±—ã—á–Ω—ã–π deeplink ?start=<key> ‚Äî –æ–¥–∏–Ω –º–∞—Ç–µ—Ä–∏–∞–ª + –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–ø–ª–∞—Ç–∏—Ç—å
    if payload in TITLES and get_url(payload):
        await message.answer(TITLES[payload], reply_markup=link_kb_single(payload))
        await message.answer("–•–æ—á–µ—à—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º?", reply_markup=paywall_kb())
        return

    # –ë–∞–∑–æ–≤—ã–π —Å—Ç–∞—Ä—Ç
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –æ—Ç–ø—Ä–∞–≤–ª—é –Ω—É–∂–Ω—ã–µ —Å—Å—ã–ª–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=MAIN_KB)
    await message.answer("–ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏:", reply_markup=link_kb_all())
    await message.answer("–ú–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º:", reply_markup=paywall_kb())

# =========================
# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é (—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –≤ only-—Ä–µ–∂–∏–º–µ)
# =========================
def locked(m: types.Message) -> bool:
    return (m.chat.id in ONLY_MODE_CHATS) and (m.chat.id not in UNLOCKED_CHATS)

@dp.message(F.text == "üè° –ü–ª–æ—â–∞–¥–∫–∏ –±–µ–∑ –∞—Ä–µ–Ω–¥—ã")
async def kb_venues(m: types.Message):
    if locked(m):
        await m.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.", reply_markup=paywall_kb())
        return
    await m.answer(TITLES["venues"], reply_markup=link_kb_single("venues"))

@dp.message(F.text == "üí∏ –°–∫—Ä—ã—Ç—ã–µ —Ä–∞—Å—Ö–æ–¥—ã")
async def kb_hidden(m: types.Message):
    if locked(m):
        await m.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.", reply_markup=paywall_kb())
        return
    await m.answer(TITLES["hidden_costs"], reply_markup=link_kb_single("hidden_costs"))

@dp.message(F.text == "‚öñÔ∏è –ü–æ–¥ –∫–ª—é—á vs DIY")
async def kb_vs(m: types.Message):
    if locked(m):
        await m.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.", reply_markup=paywall_kb())
        return
    await m.answer(TITLES["vs_diy"], reply_markup=link_kb_single("vs_diy"))

@dp.message(F.text == "üßÆ –ë—é–¥–∂–µ—Ç —Å–≤–∞–¥—å–±—ã")
async def kb_budget(m: types.Message):
    if locked(m):
        await m.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.", reply_markup=paywall_kb())
        return
    await m.answer(TITLES["budget_calc"], reply_markup=link_kb_single("budget_calc"))

@dp.message(F.text == "üßæ –ß–µ–∫-–ª–∏—Å—Ç")
async def kb_checklist(m: types.Message):
    if locked(m):
        await m.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.", reply_markup=paywall_kb())
        return
    await m.answer(TITLES["checklist"], reply_markup=link_kb_single("checklist"))

@dp.message(F.text == "‚ùì –í–æ–ø—Ä–æ—Å—ã –ø–ª–æ—â–∞–¥–∫–µ")
async def kb_questions(m: types.Message):
    if locked(m):
        await m.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.", reply_markup=paywall_kb())
        return
    await m.answer(TITLES["venue_questions"], reply_markup=link_kb_single("venue_questions"))

@dp.message(F.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def kb_about(m: types.Message):
    await m.answer("–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ Cherepkova Event üíç\n–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å–≤–∞–¥–µ–± –ø–æ–¥ –∫–ª—é—á.\nhttps://cherepkovaevent.ru")

# =========================
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã —Å—Å—ã–ª–æ–∫
# =========================
@dp.message(Command("seturl"))
async def seturl(message: types.Message):
    # /seturl budget_calc https://new-link
    try:
        _, key, url = (message.text or "").split(maxsplit=2)
    except ValueError:
        await message.reply("–§–æ—Ä–º–∞—Ç: /seturl <venues|hidden_costs|vs_diy|checklist|budget_calc|venue_questions> <URL>")
        return

    if key not in TITLES:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑: " + ", ".join(TITLES.keys()))
        return

    ASSETS.setdefault(key, {})
    if isinstance(ASSETS[key], dict):
        ASSETS[key]["url"] = url
    else:
        ASSETS[key] = {"url": url}
    save_assets()
    await message.reply(f"URL –¥–ª—è {key} —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ")

# =========================
# –ü–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª —Å deeplink-–∫–Ω–æ–ø–∫–∞–º–∏
# =========================
@dp.message(Command("post"))
async def post(message: types.Message):
    username = BOT_USERNAME or (await bot.get_me()).username
    text = (
        "–ü–æ–¥–±–æ—Ä–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –æ—Ç Cherepkova Event üëá\n"
        "‚Ä¢ üè° –ü–ª–æ—â–∞–¥–∫–∏ –±–µ–∑ –∞—Ä–µ–Ω–¥—ã\n"
        "‚Ä¢ üí∏ –°–∫—Ä—ã—Ç—ã–µ —Ä–∞—Å—Ö–æ–¥—ã\n"
        "‚Ä¢ üßæ –ß–µ–∫-–ª–∏—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏\n"
        "‚Ä¢ üßÆ –ë—é–¥–∂–µ—Ç —Å–≤–∞–¥—å–±—ã\n"
        "‚Ä¢ ‚ùì –í–æ–ø—Ä–æ—Å—ã –ø–ª–æ—â–∞–¥–∫–µ\n"
        "‚Ä¢ ‚öñÔ∏è –ü–æ–¥ –∫–ª—é—á vs DIY"
    )
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè° –ü–ª–æ—â–∞–¥–∫–∏",          url=f"https://t.me/{username}?start=venues")],
            [InlineKeyboardButton(text="üí∏ –°–∫—Ä—ã—Ç—ã–µ —Ä–∞—Å—Ö–æ–¥—ã",   url=f"https://t.me/{username}?start=hidden_costs")],
            [InlineKeyboardButton(text="üßæ –ß–µ–∫-–ª–∏—Å—Ç",          url=f"https://t.me/{username}?start=checklist")],
            [InlineKeyboardButton(text="üßÆ –ë—é–¥–∂–µ—Ç —Å–≤–∞–¥—å–±—ã",    url=f"https://t.me/{username}?start=budget_calc")],
            [InlineKeyboardButton(text="‚ùì –í–æ–ø—Ä–æ—Å—ã –ø–ª–æ—â–∞–¥–∫–µ",  url=f"https://t.me/{username}?start=venue_questions")],
            [InlineKeyboardButton(text="‚öñÔ∏è –ü–æ–¥ –∫–ª—é—á vs DIY",  url=f"https://t.me/{username}?start=vs_diy")]
        ]
    )
    await bot.send_message(CHANNEL, text, reply_markup=kb)
    await message.reply("–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª ‚úÖ")

# =========================
# –ü–æ—Å—Ç —Å –ø—Ä—è–º—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ (–±–µ–∑ –±–æ—Ç–∞)
# =========================
@dp.message(Command("post_direct"))
async def post_direct(message: types.Message):
    def btn(label, key):
        u = get_url(key)
        return [InlineKeyboardButton(text=label, url=u)] if u else None

    rows = []
    for label, key in [
        ("üè° –ü–ª–æ—â–∞–¥–∫–∏ –±–µ–∑ –∞—Ä–µ–Ω–¥—ã", "venues"),
        ("üí∏ –°–∫—Ä—ã—Ç—ã–µ —Ä–∞—Å—Ö–æ–¥—ã",     "hidden_costs"),
        ("üßæ –ß–µ–∫-–ª–∏—Å—Ç",            "checklist"),
        ("üßÆ –ë—é–¥–∂–µ—Ç —Å–≤–∞–¥—å–±—ã",      "budget_calc"),
        ("‚ùì –í–æ–ø—Ä–æ—Å—ã –ø–ª–æ—â–∞–¥–∫–µ",    "venue_questions"),
        ("‚öñÔ∏è –ü–æ–¥ –∫–ª—é—á vs DIY",     "vs_diy"),
    ]:
        r = btn(label, key)
        if r: rows.append(r)

    if not rows:
        await message.reply("–ù–µ –∑–∞–¥–∞–Ω—ã —Å—Å—ã–ª–∫–∏ –≤ assets.json (/seturl).")
        return

    text = "–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç Cherepkova Event üëá"
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    await bot.send_message(CHANNEL, text, reply_markup=kb)
    await message.reply("–ü–æ—Å—Ç —Å –ø—Ä—è–º—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª ‚úÖ")

# =========================
# –û–ø–ª–∞—Ç–∞ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
# =========================
@dp.callback_query(F.data == "buy_all")
async def buy_all(cb: types.CallbackQuery):
    await cb.answer()
    if not PAYMENT_TOKEN:
        await cb.message.answer("–û–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º ‚Äî –≤—ã—à–ª–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤—Ä—É—á–Ω—É—é.")
        return

    prices = [LabeledPrice(label="–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º", amount=PRICE_RUB * 100)]  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    await bot.send_invoice(
        chat_id=cb.message.chat.id,
        title="Cherepkova Event ‚Äî –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø",
        description="–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏ —Å—Å—ã–ª–∫–∞–º –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞.",
        payload="unlock_all",
        provider_token=PAYMENT_TOKEN,
        currency="RUB",
        prices=prices,
    )

@dp.pre_checkout_query()
async def on_pre_checkout(pre: types.PreCheckoutQuery):
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–∏–º–∏—Ç—ã, —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏ —Ç.–ø.)
    await bot.answer_pre_checkout_query(pre.id, ok=True)

@dp.message(F.successful_payment)
async def on_success_payment(message: types.Message):
    UNLOCKED_CHATS.add(message.chat.id)
    save_unlocked()
    ONLY_MODE_CHATS.discard(message.chat.id)  # —Å–Ω–∏–º–∞–µ–º –∂—ë—Å—Ç–∫–∏–π —Ä–µ–∂–∏–º, –µ—Å–ª–∏ –±—ã–ª

    await message.answer("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç ‚úÖ")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=MAIN_KB)
    await message.answer("–ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏:", reply_markup=link_kb_all())

# =========================
# –ó–∞–ø—É—Å–∫
# =========================
async def main():
    load_assets()
    load_unlocked()
    print("Bot is running‚Ä¶")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
