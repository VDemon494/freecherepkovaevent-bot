import asyncio
import json
import os
from pathlib import Path
from typing import Dict, Any, Optional

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton
)
from dotenv import load_dotenv

# -------- –∫–æ–Ω—Ñ–∏–≥ --------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL = os.getenv("CHANNEL", "@cherepkovaevent")
BOT_USERNAME = (os.getenv("BOT_USERNAME") or "").lstrip("@")  # freecherepkovaevent_bot

if not BOT_TOKEN:
    raise SystemExit("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN")

ASSETS_FILE = Path("assets.json")
ASSETS: Dict[str, Any] = {}

TITLES = {
    "venues": "–ó–∞–≥–æ—Ä–æ–¥–Ω—ã–µ –ø–ª–æ—â–∞–¥–∫–∏ –±–µ–∑ –∞—Ä–µ–Ω–¥—ã (–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥)",
    "hidden_costs": "–°–∫—Ä—ã—Ç—ã–µ —Ä–∞—Å—Ö–æ–¥—ã —Å–≤–∞–¥—å–±—ã",
    "vs_diy": "–°–≤–∞–¥—å–±–∞ ¬´–ø–æ–¥ –∫–ª—é—á¬ª vs —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞",
    "checklist": "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç: ¬´–ö–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–≤–∞–¥—å–±—É –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–±—ã—Ç—å¬ª",
    "budget_calc": "–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–≤–∞–¥–µ–±–Ω—ã–π –±—é–¥–∂–µ—Ç",
    "venue_questions": "–ö–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞—Ç—å –ø–ª–æ—â–∞–¥–∫–µ –ø–µ—Ä–µ–¥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º?"
}


MAIN_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üè° –ü–ª–æ—â–∞–¥–∫–∏ –±–µ–∑ –∞—Ä–µ–Ω–¥—ã"), KeyboardButton(text="üí∏ –°–∫—Ä—ã—Ç—ã–µ —Ä–∞—Å—Ö–æ–¥—ã")],
        [KeyboardButton(text="‚öñÔ∏è –ü–æ–¥ –∫–ª—é—á vs DIY"),   KeyboardButton(text="üßÆ –ë—é–¥–∂–µ—Ç —Å–≤–∞–¥—å–±—ã")],
        [KeyboardButton(text="üßæ –ß–µ–∫-–ª–∏—Å—Ç"),          KeyboardButton(text="‚ùì –í–æ–ø—Ä–æ—Å—ã –ø–ª–æ—â–∞–¥–∫–µ")],
        [KeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å")]
    ],
    resize_keyboard=True
)


# -------- —É—Ç–∏–ª–∏—Ç—ã --------
def load_assets():
    global ASSETS
    if ASSETS_FILE.exists():
        try:
            ASSETS = json.loads(ASSETS_FILE.read_text(encoding="utf-8"))
        except Exception:
            ASSETS = {}
    else:
        ASSETS = {}

def save_assets():
    ASSETS_FILE.write_text(json.dumps(ASSETS, ensure_ascii=False, indent=2), encoding="utf-8")

def get_url(key: str) -> Optional[str]:
    return (ASSETS.get(key) or {}).get("url")

def link_kb_single(key: str) -> InlineKeyboardMarkup:
    url = get_url(key)
    if url:
        btn = InlineKeyboardButton(text=f"–û—Ç–∫—Ä—ã—Ç—å: {TITLES.get(key, key)}", url=url)
    else:
        fallback = f"https://t.me/{BOT_USERNAME}" if BOT_USERNAME else "https://t.me"
        btn = InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞", url=fallback)
    return InlineKeyboardMarkup(inline_keyboard=[[btn]])

def link_kb_all() -> InlineKeyboardMarkup:
    rows = []
    def row(key, label):
        url = get_url(key)
        if url:
            rows.append([InlineKeyboardButton(text=label, url=url)])
    row("venues",          "üè° –ü–ª–æ—â–∞–¥–∫–∏ –±–µ–∑ –∞—Ä–µ–Ω–¥—ã")
    row("hidden_costs",    "üí∏ –°–∫—Ä—ã—Ç—ã–µ —Ä–∞—Å—Ö–æ–¥—ã")
    row("vs_diy",          "‚öñÔ∏è –ü–æ–¥ –∫–ª—é—á vs DIY")
    row("checklist",       "üßæ –ß–µ–∫-–ª–∏—Å—Ç")
    row("budget_calc",     "üßÆ –ë—é–¥–∂–µ—Ç —Å–≤–∞–¥—å–±—ã")
    row("venue_questions", "‚ùì –í–æ–ø—Ä–æ—Å—ã –ø–ª–æ—â–∞–¥–∫–µ")

    if not rows:
        fallback = f"https://t.me/{BOT_USERNAME}" if BOT_USERNAME else "https://t.me"
        rows = [[InlineKeyboardButton(text="–°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã", url=fallback)]]
    return InlineKeyboardMarkup(inline_keyboard=rows)


# -------- –±–æ—Ç --------
bot = Bot(BOT_TOKEN)
dp = Dispatcher()

@dp.message(CommandStart())
async def start(message: types.Message):
    parts = (message.text or "").split(maxsplit=1)
    payload = parts[1].strip() if len(parts) == 2 else None
    if payload in TITLES:
        url = get_url(payload)
        if url:
            await message.answer(f"{TITLES[payload]}\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=link_kb_single(payload))
        else:
            await message.answer("–°—Å—ã–ª–∫–∞ –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –æ—Ç–ø—Ä–∞–≤–ª—é –Ω—É–∂–Ω—ã–µ —Å—Å—ã–ª–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=MAIN_KB)
    await message.answer("–ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏:", reply_markup=link_kb_all())

@dp.message(Command("docs"))
async def docs(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:", reply_markup=link_kb_all())

@dp.message(F.text == "üßæ –ß–µ–∫-–ª–∏—Å—Ç")
async def checklist(message: types.Message):
    if get_url("checklist"):
        await message.answer(TITLES["checklist"], reply_markup=link_kb_single("checklist"))
    else:
        await message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫-–ª–∏—Å—Ç –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")

@dp.message(F.text == "üìò –ì–∞–π–¥")
async def guide(message: types.Message):
    if get_url("guide"):
        await message.answer(TITLES["guide"], reply_markup=link_kb_single("guide"))
    else:
        await message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –≥–∞–π–¥ –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")

@dp.message(F.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def about(message: types.Message):
    await message.answer(
        "–ú—ã ‚Äî Cherepkova Event: —Å–≤–∞–¥—å–±–∞ –ø–æ–¥ –∫–ª—é—á –ø–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω–µ –∏ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–∞—Ä—ã.\n"
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://cherepkovaevent.ru"
    )

@dp.message(Command("seturl"))
async def seturl(message: types.Message):
    try:
        _, key, url = (message.text or "").split(maxsplit=2)
    except ValueError:
        await message.reply("–§–æ—Ä–º–∞—Ç: /seturl <checklist|guide> <URL>")
        return
    if key not in ("checklist", "guide"):
        await message.reply("–ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å checklist –∏–ª–∏ guide")
        return
    ASSETS.setdefault(key, {})
    ASSETS[key]["url"] = url
    save_assets()
    await message.reply(f"URL –¥–ª—è {key} —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ")

@dp.message(Command("post"))
async def post(message: types.Message):
    username = BOT_USERNAME or (await bot.get_me()).username
    text = (
        "–ì–æ—Ç–æ–≤–∏—Ç–µ—Å—å –∫ —Å–≤–∞–¥—å–±–µ? –ó–∞–±–∏—Ä–∞–π—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã üëá\n"
        "‚Ä¢ üßæ –ß–µ–∫-–ª–∏—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏\n"
        "‚Ä¢ üìò –ì–∞–π–¥ ¬´100 —à–∞–≥–æ–≤¬ª"
    )
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üßæ –ß–µ–∫-–ª–∏—Å—Ç", url=f"https://t.me/{username}?start=checklist")],
            [InlineKeyboardButton(text="üìò –ì–∞–π–¥",     url=f"https://t.me/{username}?start=guide")]
        ]
    )
    await bot.send_message(CHANNEL, text, reply_markup=kb)
    await message.reply("–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª ‚úÖ")

@dp.message(Command("post_direct"))
async def post_direct(message: types.Message):
    c_url = get_url("checklist")
    g_url = get_url("guide")
    if not (c_url or g_url):
        await message.reply("–ù–µ –∑–∞–¥–∞–Ω—ã —Å—Å—ã–ª–∫–∏ –≤ assets.json (/seturl).")
        return
    text = "–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Å–≤–∞–¥—å–±–µ üëá"
    rows = []
    if c_url: rows.append([InlineKeyboardButton(text="üßæ –û—Ç–∫—Ä—ã—Ç—å –ß–µ–∫-–ª–∏—Å—Ç", url=c_url)])
    if g_url: rows.append([InlineKeyboardButton(text="üìò –û—Ç–∫—Ä—ã—Ç—å –ì–∞–π–¥", url=g_url)])
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    await bot.send_message(CHANNEL, text, reply_markup=kb)
    await message.reply("–ü–æ—Å—Ç —Å –ø—Ä—è–º—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª ‚úÖ")
# ==============================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
# ==============================

@dp.message(F.text == "üè° –ü–ª–æ—â–∞–¥–∫–∏ –±–µ–∑ –∞—Ä–µ–Ω–¥—ã")
async def kb_venues(m: types.Message):
    await m.answer(TITLES["venues"], reply_markup=link_kb_single("venues"))

@dp.message(F.text == "üí∏ –°–∫—Ä—ã—Ç—ã–µ —Ä–∞—Å—Ö–æ–¥—ã")
async def kb_hidden(m: types.Message):
    await m.answer(TITLES["hidden_costs"], reply_markup=link_kb_single("hidden_costs"))

@dp.message(F.text == "‚öñÔ∏è –ü–æ–¥ –∫–ª—é—á vs DIY")
async def kb_vs(m: types.Message):
    await m.answer(TITLES["vs_diy"], reply_markup=link_kb_single("vs_diy"))

@dp.message(F.text == "üßÆ –ë—é–¥–∂–µ—Ç —Å–≤–∞–¥—å–±—ã")
async def kb_budget(m: types.Message):
    await m.answer(TITLES["budget_calc"], reply_markup=link_kb_single("budget_calc"))

@dp.message(F.text == "üßæ –ß–µ–∫-–ª–∏—Å—Ç")
async def kb_checklist(m: types.Message):
    await m.answer(TITLES["checklist"], reply_markup=link_kb_single("checklist"))

@dp.message(F.text == "‚ùì –í–æ–ø—Ä–æ—Å—ã –ø–ª–æ—â–∞–¥–∫–µ")
async def kb_questions(m: types.Message):
    await m.answer(TITLES["venue_questions"], reply_markup=link_kb_single("venue_questions"))

@dp.message(F.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def kb_about(m: types.Message):
    await m.answer("–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ Cherepkova Event üíç\n–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å–≤–∞–¥–µ–± –ø–æ–¥ –∫–ª—é—á.\nhttps://cherepkovaevent.ru")


async def main():
    load_assets()
    print("Bot is running‚Ä¶")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
